[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "wlan-tool"
version = "1.0.0"
description = "Advanced WLAN Analysis Tool with Machine Learning"
authors = [{name = "WLAN Tool Team", email = "team@wlantool.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Networking",
]

dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "scapy>=2.4.0",
    "joblib>=1.1.0",
    "tqdm>=4.64.0",
    "rich>=13.0.0",
    "click>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-benchmark>=4.0.0",
    "pytest-xdist>=3.3.1",
    "pytest-html>=3.2.0",
    "pytest-json-report>=1.5.0",
    "hypothesis>=6.82.0",
    "factory-boy>=3.3.0",
    "faker>=19.3.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "radon>=6.0.1",
    "xenon>=0.9.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
    "py-spy>=0.3.14",
    "line-profiler>=4.1.1",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
    "coverage>=7.2.0",
    "codecov>=2.1.13",
]

[project.scripts]
wlan-tool = "wlan_tool.cli:main"
wlan-benchmark = "wlan_tool.benchmarks.cli:main"
wlan-profile = "wlan_tool.profiling.cli:main"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["wlan_tool"]
known_third_party = ["numpy", "pandas", "sklearn", "matplotlib", "seaborn", "plotly"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "scapy.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["wlan_tool"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
skips = ["B101", "B601"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=wlan_tool",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--benchmark-only",
    "--benchmark-sort=mean",
    "--html=reports/pytest_report.html",
    "--self-contained-html",
    "--json-report",
    "--json-report-file=reports/pytest_report.json",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "slow: Slow running tests",
    "plugin: Plugin tests",
    "clustering: Clustering algorithm tests",
    "ensemble: Ensemble model tests",
    "rl: Reinforcement learning tests",
    "benchmark: Benchmark tests",
    "memory: Memory profiling tests",
    "load: Load testing",
    "security: Security tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:sklearn.*",
]