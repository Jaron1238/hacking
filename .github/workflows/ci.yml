name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcap-dev tcpdump
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r pytest/requirements-test.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 wlan_tool/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 wlan_tool/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        pip install mypy
        mypy wlan_tool/ --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        cd pytest
        pytest -v --cov=wlan_tool --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./pytest/coverage.xml
        flags: unittests
        name: codecov-umbrella

  plugin-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r pytest/requirements-test.txt
        pip install plotly umap-learn hdbscan gym torch
    
    - name: Test Plugin System
      run: |
        python scripts/plugin_manager.py health
        python scripts/plugin_manager.py list
        cd pytest && make test-plugins

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit Security Scan
      run: |
        bandit -r wlan_tool/ -f json -o bandit-report.json
        bandit -r wlan_tool/ -ll
    
    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json
        safety check

  build:
    runs-on: ubuntu-latest
    needs: [test, plugin-test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Build package
      run: |
        pip install build
        python -m build
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/